#####################################################################
# 	Macros
#####################################################################
##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  CHAMBER_TEMP  : Target temperature for the chamber fan controll
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
##  LAYER_HEIGHT  : Hight of prime_line should be set to layer_hight
##  Z_ADJUST      : Add extra z offset via slicer
##  FILTER        : Activate Nevermore 1 On 0 Off default On
[gcode_macro PRINT_START]
description: All cmd needed at print start
variable_var: {'temp'        : {'extruder': 245.0, 'bed': 100.0, 'chamber': 40.0, 'endstop': 0.0},
               'delta'       : {'chamber': 5.0, 'bed': 10},
               'time'        : {'soak' : 1800, 'soak_extra': 900},
               'redo_qgl'    : True,
               'prime_height': 0.0,
               'z_adjust'    : 0.0,
               'filter'      : True}
## Valid state 
##   Prepare    : Store Params
##   HeatBed    : heat up bed and decide if soak is needed 
##   HeatSoak   : loop the time specified with SOAK
##   Chamber    : decide if extra soak is needed
##   ChamberSoak: loop the time specified with EXTRA_SOAK or Chamber target reached
##   Final      : all what needs to be done after wait time
variable_state: 'Prepare'
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  {% set actBed = printer['temperature_sensor bed'].temperature|float|round(1) if 'temperature_sensor bed' in printer 
             else printer.heater_bed.temperature|float|round(1) %} ; get actual temp from extra sensor or heater sensor
  ##############################  Prepare phase only done at the first exection of PRINT_START  ##############################
  {% if state == 'Prepare' %}
    #############  Store input parameters  #############
    {% set var = {'temp': {'extruder': params.EXTRUDER_TEMP|default(245)|float|round(1),
                           'bed'     : params.BED_TEMP|default(100)|float|round(1),
                           'chamber' : params.CHAMBER_TEMP|default(40)|float|round(1),
                           'endstop' : 0.0},
                  'delta': {'chamber': params.DELTA_C|default(5)|float|round(1), 
                            'bed'    : params.DELTA_B|default(10)|float|round(1)},
                  'time' : {'soak'      : params.SOAK|default(30)|int * 60,
                            'soak_extra': params.CHAMBER_SOAK|default(15)|int * 60 if params.EXTRA_SOAK|default('true') == 'true' and 
                                                                                      user.hw.chamber.ena 
                                          else 0},
               'redo_qgl'    : True,
               'prime_height': params.LAYER_HEIGHT|float * user.print_start.prime_mult|float if LAYER_HEIGHT in params
                          else user.prime.pos.z|float,
               'z_adjust'    : params.Z_ADJUST|default(0.0)|float,
               'filter'      : False if params.FILTER|default(1)|int == 0 else True} %}
    {% if user.hw.caselight.ena %} _CASELIGHT_ON {% endif %}             ; switch on light
    {% if user.hw.filter.ena and var.filter %} _FILTER_ON {% endif %}    ; activate filter
    _CG28                                                                ; home if needed
    G90                                                                  ; absolute position
    G0 Z{user.park.bed.z} F{user.speed.z_hop}                            ; move nozzle to z high first
    G0 X{user.park.bed.x} Y{user.park.bed.y} F{user.speed.travel}        ; home to get toolhead in the middle
    PAUSE_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatBed"'
    UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
  ##############################  HeatBed Phase heat up the bed  ##############################    
  {% elif state == 'HeatBed' %}
    # get max allow bed temp from config. Lower it by 5C to avoid shutdown
    {% set cfg_bed_max = printer.configfile.settings.heater_bed.max_temp|float|round(1) - 5.0 %}
    {% set targetBed = var.temp.bed - var.delta.bed %}
    {% set soakBed = [(var.temp.bed + user.print_start.bed_up), cfg_bed_max]|min %}
    {% if (var.time.soak <= 0) or (actBed >= targetBed) %}  ; check if soak time is 0 or if the bed is still hot
      M117 Heating Extruder
      {% set text = 'heat soak disabled' if var.time.soak <= 0 else 'heat soak not needed' %}
      _PRINT_AR T="{"Bed temp: act %3.1fC min %3.1fC (target(%3.1fC) - delta(%2.1fC)) %s" % 
                    (actBed,targetBed,var.temp.bed,var.delta.bed,text)}"
      {% set _dummy = var.update({'redo_qgl' : False}) %}
      M140 S{var.temp.bed}      ; heat bed
      M109 S150 ; heat extruder to 150 (Tap!) and wait
      M190 S{var.temp.bed}      ; heat bed and wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      M117 Heating Bed
      _PRINT_AR T="{"Bed temp: act %3.1fC min %3.1fC (target(%3.1fC) - delta(%2.1fC)) heat soak needed" % 
                   (actBed,targetBed,var.temp.bed,var.delta.bed)}"
      _PRINT_AR T="{"Set Bed temp to %3.1fC instead of %3.1fC for faster heat soak" % (soakBed,var.temp.bed)}"    
      M106 S90              ; switch part cooling ~35% to move air in chamber
      M140 S{soakBed}       ; heat bed
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
      {% set next_duration = user.print_start.ival if var.time.soak > user.print_start.ival else var.time.soak %}
      {% set _dummy = var.time.update({'soak': var.time.soak - user.print_start.ival}) if var.time.soak > user.print_start.ival 
                 else var.time.update({'soak': 0}) %}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% endif%}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    _RUNOUT_INFO    
  ##############################  Heatsoak Phase call the delay macro until time is over  ##############################
  {% elif state == 'HeatSoak' %}
    #############  Get filament runout info  #############
    {% if user.hw.runout.sensor %}
      {% if printer["filament_" + user.hw.runout.type + "_sensor runout"].enabled|lower == 'true' %}
        {% set filament_detected = printer["filament_" + user.hw.runout.type + "_sensor runout"].filament_detected %}
      {% elif 'filament_loaded' in printer.save_variables.variables %}
        {% set filament_detected = printer.save_variables.variables.filament_loaded %}
      {% else %}
        {% set filament_detected = True %}
      {% endif %}
    {% elif user.hw.runout.type == 'file' %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = True %}
    {% endif %}
    {% if filament_detected %}
      {% if var.time.soak <= (user.print_start.time.extruder + var.temp.extruder - 240) and 
             var.temp.extruder != printer.extruder.target %} ; check time to start heating extruder
        M104 S150 ; heat extruder to 150 (Tap!)
      {% endif %}
      {% if var.time.soak <= user.print_start.time.bed and bed != printer.heater_bed.target|int %}  ; check time to reduce bed temp
        M140 S{var.temp.bed} ; heat bed
      {% endif %}
      {% if var.time.soak > 0 %} ; check remaining time
        {% set next_duration = var.time.soak if user.print_start.ival >= var.time.soak else user.print_start.ival %}
        {% set _dummy = var.time.update({'soak': 0}) if user.print_start.ival >= var.time.soak 
                   else var.time.update({'soak': var.time.soak - user.print_start.ival}) %}}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
      {% else %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
        _PRINT_AR T="{"Bed act temp=%3.1fC heat soak done" % (actBed)}"
      {% endif%}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    {% else %}
      _PRINT_AR T="No Filament loaded, print aborded!"
      CANCEL_PRINT PARK=1 ERROR=1
    {% endif %}
  ##############################  Decide if extended soaking is needed  ##############################
  {% elif state == 'Chamber' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %}
      _PRINT_AR T="{"Chamber temp: act %2.1fC min %2.1fC (target(%2.1fC) - delta(%2.1fC)) extra heat soak needed" %
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"ChamberSoak"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      {% set text = 'extra heat soak disabled' if var.time.soak_extra <= 0 else 'extra heat soak not needed' %}
      _PRINT_AR T="{"Chamber temp: act %2.1fC min %2.1fC (target(%2.1fC) - delta(%2.1fC)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5  
    {% endif %}
  ############################## extra Heat Soak terminated by chamber temp  ##############################
  {% elif state == 'ChamberSoak' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %} ; check remaining time and temp difference
      {% set next_duration = var.time.soak_extra if user.print_start.ival >= var.time.soak_extra else user.print_start.ival %}
      {% set _dummy = var.time.update({'soak_extra': 0}) if user.print_start.ival >= var.time.soak_extra
                 else var.time.update({'soak_extra': var.time.soak_extra - user.print_start.ival}) %}}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% else %}
      {% set text = 'extra heat soak timed out' if var.time.soak_extra == 0 else 'chamber temp reached' %}
      _PRINT_AR T="{"Chamber temp: act %2.1fC min %2.1fC (target(%2.1fC) - delta(%2.1fC)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% endif %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
  ##############################  all whats need to run at the end  ##############################
  {% elif state == 'Final' %}
    RESUME_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"' ; set state for next print
    M106 S0                                                               ; turn off part cooling fan
	NOZZLECLEAN EXTRUDE=0
    G34       ; home & QGL
    G28 Z
    SET_GCODE_OFFSET Z_ADJUST={var.z_adjust} MOVE=1
    _PRINT_OFFSET
    BED_MESH_LOAD AUTO=true ;Generate new Mash an load it
    _PRINT_AR T="{"Heating Extruder to %3.1fC " % (var.temp.extruder)}"  
    M109 S{var.temp.extruder}
    _PRIME_LINE PRIME_HEIGHT={var.prime_height}
    G21                                                 ; set units to millimeters
    G90                                                 ; use absolute coordinates
    M83                                                 ; use relative distances for extrusion
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}    
  {% if user.hw.sbled.ena %} STATUS_PRINTING {% endif %} 
 
[delayed_gcode _START_PRINT_WAIT]
gcode:
  {% macro print_time(text, time) %} ; print remaining time
    M117 {'%s' % text} {(time|int // 60)}:{'%02d' % (time|int % 60)}
  {% endmacro %}
  {% if printer['gcode_macro PRINT_START'].state == 'HeatSoak'%}
   { print_time("HEAT SOAK", printer['gcode_macro PRINT_START'].var.time.soak) }
  {% elif printer['gcode_macro PRINT_START'].state == 'ChamberSoak' %}
    { print_time("SOAK", printer['gcode_macro PRINT_START'].var.time.soak_extra) }
  {% endif %}
  # Check CANCLE_PRINT was executed
  {% if printer['gcode_macro CANCEL_PRINT'].execute|lower == 'false' %}
    PRINT_START  ; Junp back to PRINT_START
  {% else %} ; break loop and insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}
  
[gcode_macro PRINT_END]
description: All commands after the print
gcode:
  {% set user       = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filter_off = user.peripheral.filter.run_after_print %}
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  # calculate save move
  {% set max = printer.toolhead.axis_maximum %}
  {% set act = printer.toolhead.position %}
  {% set safe = {'x': 20.0 if act.x|float < (max.x|float - 20.0) else -20.0,
                 'y': 20.0 if act.y|float < (max.y|float - 20.0) else -20.0,
                 'z':  2.0 if act.z|float < (max.z|float -  2.0) else (max.z|float - act.z|float)} %}
  M400                                                              ; wait for buffer to clear
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  G92 E0                                                            ; zero the extruder
  M83                                                               ; relative extrusion
  G1 E-{user.filament.retract.end} F{user.speed.retract}            ; retract filament
  G91                                                               ; relative positioning
  G0 X{safe.x} Y{safe.y} Z{safe.z} F{user.speed.travel}             ; move nozzle to remove stringing
  TURN_OFF_HEATERS                                                  ; turn off heaters
  M107                                                              ; turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %}          ; vent chamber (setting fan to below ambient)
  G90                                                               ; absolute positioning
  G0 X{user.park.pause.x} Y{user.park.pause.y} F{user.speed.travel} ; park nozzle at brush bin
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.sbled.ena %} STATUS_READY {% endif %} 
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.unload_sd|lower == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  M220 S100 ; set feedrate percentage back to default
  M221 S100 ; set speed percentage back to default


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_execute: False
gcode:
  {% set user       = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filter_off = user.peripheral.filter.run_after_print %}
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  {% set retract    = user.filament.retract.end if not printer.pause_resume.is_paused 
                 else user.filament.retract.cancel %}
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=True
  M117 Cancel
  CANCEL_PRINT_BASE
  {% if printer['gcode_macro PRINT_START'].state == 'Prepare' %}
    {% if not printer.extruder.can_extrude %}
      {action_respond_info("Extruder Temp to low heat to %3.1fC" % printer.configfile.settings.extruder.min_extrude_temp)}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
    {% endif %}
    M83
    G1 E-{retract} F{user.speed.retract}
  {% endif %}
  TURN_OFF_HEATERS
  {% if params.PARK|default(0)|int == 1 or (not printer.pause_resume.is_paused and user.park.park_at_cancel) %}
    _TOOLHEAD_PARK P={params.PARK|default(0)} X={user.park.pause.x} Y={user.park.pause.y}
  {% endif %}
  M107                                                     ; turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %} ; vent chamber (setting fan to below ambient)
  _ADD_PRINT_TIME
  {% if params.ERROR|default(0)|int == 1 %}
      {% if user.hw.sbled.ena %} STATUS_BUSY {% endif %} 
    _SD_PRINT_STATS R='abort'
  {% else %}
   {% if user.hw.sbled.ena %} STATUS_OFF {% endif %} 
    _SD_PRINT_STATS R='canceled'
  {% endif %}
  _SD_PRINTER_STATS
  {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.unload_sd %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore: {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500}
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  ##### store coordinates to restore them at resume #####
  {% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
                                 'extrude'    : printer.gcode_move.absolute_extrude},
                    'speed'   : printer.gcode_move.speed} %}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore VALUE="{restore}"
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE BLINK=1 {% endif %}
  {% if user.hw.sbled.ena %} SET_NOZZLE_LEDS_OFF {% endif %}   
  {% if not printer.extruder.can_extrude %}
    {action_respond_info("Extruder Temp to low heat to %3.1fC" % printer.configfile.settings.extruder.min_extrude_temp)}
    M109 S{printer.configfile.settings.extruder.min_extrude_temp}
  {% endif %}
  M83
  G0 E-{user.filament.retract.pause} F{user.speed.retract}
  PAUSE_BASE
  _TOOLHEAD_PARK P=0 X={params.X|default(user.park.pause.x)} Y={params.Y|default(user.park.pause.y)}
  M104 S{printer.extruder.target}


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set restore  = printer["gcode_macro PAUSE"].restore %}
  {% if user.hw.sbled.ena %} SET_NOZZLE_LEDS_ON {% endif %} 
  RESUME_BASE VELOCITY={params.VELOCITY|default(user.speed.travel/60)}  
  G0 E{user.filament.retract.pause} F{user.speed.retract}
  G0 F{restore.speed}
  {% if restore.absolute.extrude %}         M82 {% endif %} ; set back to absolute
  {% if not restore.absolute.coordinates %} G91 {% endif %} ; set back to relative

